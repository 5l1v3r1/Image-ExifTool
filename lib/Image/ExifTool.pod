#------------------------------------------------------------------------------
# File:         ExifTool.pod - Documentation for File::ExifTool
#
# Description:  Utility to read EXIF information from image files
#
# URL:          http://owl.phy.queensu.ca/~phil/exiftool/
#
# Legal:        Copyright (c) 2003-2005 Phil Harvey (phil at owl.phy.queensu.ca)
#               This library is free software; you can redistribute it and/or
#               modify it under the same terms as Perl itself.
#------------------------------------------------------------------------------

=head1 NAME

Image::ExifTool - Read and write meta information in image files

=head1 SYNOPSIS

  use Image::ExifTool 'ImageInfo';

  # ---- Simple procedural usage ----

  # Get hash of meta information tag names/values from an image
  $info = ImageInfo('a.jpg');

  # ---- Object-oriented usage ----

  # Create a new Image::ExifTool object
  $exifTool = new Image::ExifTool;

  # Extract meta information from an image
  $exifTool->ExtractInfo($file, \%options);

  # Get list of tags in the order they were found in the file
  @tagList = $exifTool->GetFoundTags('File');

  # Get the value of a specified tag
  $value = $exifTool->GetValue($tag, $type);

  # Get a tag description
  $description = $exifTool->GetDescription($tag);

  # Get the group name associated with this tag
  $group = $exifTool->GetGroup($tag, $family);

  # Set a new value for a tag
  $exifTool->SetNewValue($tag, $newValue);

  # Write new meta information to a file
  $success = $exifTool->WriteInfo($srcfile, $dstfile);

  # ...plus a host of other useful methods...

=head1 DESCRIPTION

ExifTool provides an extensible set of perl modules to read and write meta
information in image files.  It reads EXIF, GPS, IPTC, XMP, GeoTIFF, ICC Profile
and Photoshop IRB meta information from JPEG, TIFF, GIF, THM, CRW (Canon RAW),
CR2 (Canon 1D Mk II RAW), MRW (Minolta RAW), NEF (Nikon Electronic image
Format), PEF (Pentax RAW), ORF (Olympus RAW Format) and DNG (Digital Negative)
images, as well as the maker notes of many digital cameras by various
manufacturers including Canon, Casio, FujiFilm, Minolta/Konica-Minolta, Nikon,
Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Sanyo and Sigma/Foveon. It writes
EXIF, GPS, IPTC, XMP and MakerNotes information to JPEG, TIFF, GIF, THM, CR2,
NEF, PEF and DNG files.

=head1 METHODS

=head2 new

Creates a new ExifTool object.

    $exifTool = new Image::ExifTool;

Note that ExifTool uses AUTOLOAD to load non-member methods, so any class
using Image::ExifTool as a base class must define an AUTOLOAD which calls
Image::ExifTool::DoAutoLoad().  ie)

    sub AUTOLOAD
    {
        Image::ExifTool::DoAutoLoad($AUTOLOAD, @_);
    }

=head2 ImageInfo

Obtain meta information from image.  This is the one step function for
obtaining meta information from an image.  Internally, B<ImageInfo> calls
B<ExtractInfo> to extract the information, B<GetInfo> to generate the
information hash, and B<GetTagList> for the returned tag list.

    # Return meta information for 2 tags only (procedural)
    $info = ImageInfo($filename, $tag1, $tag2)

    # Return information about an open image file (object-oriented)
    $info = $exifTool->ImageInfo(\*FILE)

    # Return information from image data in memory for specified tags
    $info = ImageInfo(\$imageData, \@tagList, \%options)

=over 4

=item Inputs:

B<ImageInfo> is very flexible about the input arguments, and interprets
them based on their type.  It may be called with one or more arguments.
The one required argument is either a SCALAR (the image file name), a GLOB
reference (a reference to the image file) or a SCALAR reference (a
reference to the image in memory).  Other arguments are optional.  The
order of the arguments is not significant, except that the first SCALAR is
taken to be the file name unless a file reference or scalar reference came
earlier in the argument list.

Below is an explanation of how the B<ImageInfo> function arguments are
interpreted:

=over 4

=item ExifTool ref

B<ImageInfo> may be called with an ExifTool object if desired.  The
advantage of using the object-oriented form is that the options may be set
before calling B<ImageInfo>, and the object may be used afterward to access
member functions.

=item SCALAR

The first scalar argument is taken to be the file name unless an earlier
argument specified the image data via a file reference (GLOB ref) or data
reference (SCALAR ref). The remaining scalar arguments are names of tags for
requested information.  If no tags are specified, all possible information
is extracted.  Tag names may begin with '-' indicating tags to exclude.  The
tag names are case-insensitive, so note that the returned tags may not be
exactly the same as the requested tags. For this reason it is best to use
either the keys of the returned hash or the elements of the tag array when
accessing the return values

=item GLOB ref

A reference to an open image file.

=item SCALAR ref

A reference to image data in memory.

=item ARRAY ref

Reference to a list of tag names.  On entry, any elements in the list are
added to the list of requested tags.  Tags with names beginning with '-' are
excluded.  On return, this list is updated to contain a sorted list of tag
names in the proper case.

=item HASH ref

Reference to a hash containing the options settings.  See B<Options>
documentation below for a list of available options.  Options specified
as arguments to B<ImageInfo> take precidence over B<Options> settings.

=back

=item Return Values:

B<ImageInfo> returns a reference to a hash of tag/value pairs. The keys of
the hash are the tag identifiers, which are similar to the tag names but my
have an embedded copy number if more than one tag with that name was found
in the image.  Use B<GetTagName> to remove the copy number from the tag.
Note that the case of the tags may not be the same as requested. Here is a
simple example to print out the information returned by B<ImageInfo>:

    foreach (sort keys %$info) {
        print "$_ => $$info{$_}\n";
    }

With the PrintConv option enabled, values of the returned hash are usually
simple scalars but a scalar reference is used to indicate binary data. Also,
the value may be an array reference if the List option is set.  With the
List option disabled (the default), list values are joined by commas into a
single string.  Note that binary values are not necessarily extracted unless
specifically requested or the Binary option is set.  If not extracted the
value is a reference to a string of the form "Binary data ##### bytes".

With the PrintConv option disabled, the values are either simple scalars or
array references to indicate lists of values.

The code below gives an example of how to handle these return values, as
well as illustrating the use of other ExifTool functions:

    use Image::ExifTool;
    my $exifTool = new Image::ExifTool;
    $exifTool->Options(Unknown => 1);
    my $info = $exifTool->ImageInfo('a.jpg');
    my $group = '';
    my $tag;
    foreach $tag ($exifTool->GetFoundTags('Group0')) {
        if ($group ne $exifTool->GetGroup($tag)) {
            $group = $exifTool->GetGroup($tag);
            print "---- $group ----\n";
        }
        my $val = $info->{$tag};
        if (ref $val eq 'SCALAR') {
            if ($$val =~ /^Binary data/) {
                $val = "($$val)";
            } else {
                my $len = length($$val);
                $val = "(Binary data $len bytes)";
            }
        }
        printf("%-32s : %s\n", $exifTool->GetDescription($tag), $val);
    }

As well as tags representing information extracted from the image,
the following tags generated by ExifTool may be returned:

    ExifToolVersion - The ExifTool version number.

    Error - An error message if the image could not be read.

    Warning - A warning message if problems were encountered
              while extracting information from the image.

=back

=head2 Options

Get/set ExifTool options.  This function can be called to set the default
options for an ExifTool object.  Options set this way are in effect for
all function calls but may be overridden by options passed as arguments
to a specific function.

    # Exclude the 'OwnerName' tag from returned information
    $exifTool->Options( Exclude => 'OwnerName' );

    # Only get information in EXIF or MakerNotes groups
    $exifTool->Options( Group0 => [ 'EXIF', 'MakerNotes' ] );

    # Ignore information from IFD1
    $exifTool->Options( Group1 => '-IFD1' );

    # Sort by groups in family 2, and extract unknown tags
    $exifTool->Options( Sort => 'Group2', Unknown => 1 );

    # Do not extract duplicate tag names
    $oldSetting = $exifTool->Options( Duplicates => 0 );

=over 4

=item Inputs:

0) ExifTool object reference.

1) Option parameter name.

2) [optional] Option parameter value.

3-N) [optional] Additional parameter/value pairs.

=item Option Parameters:

=over 4

=item Binary

Flag to get the value of all binary tags.  Unless set, large binary values
may only be extracted for specifically requested tags. Default is 0.

=item Composite

Flag to calculate Composite tags automatically.  Default is 1.

=item DateFormat

Format for printing EXIF date/time.  See C<strftime> in the L<POSIX>
package for details about the format string.

=item Duplicates

Flag to preserve values of duplicate tags (instead of overwriting
existing value).  Default is 1.

=item Exclude

Exclude specified tags from tags extracted from an image. The
option value is either a tag name or reference to a list of tag names
to exclude.  The case of tag names is not significant. This option is
ignored for specifically requested tags.  Tags may also be excluded
by preceeding their name with a '-' in the arguments to B<ImageInfo>.

=item IgnoreMinorErrors

Causes some minor errors to be ignored.  This option is provided mainly
to allow writing of files when minor errors occur, but also allows
thumbnail and preview images to be extracted even if they don't have
a recognizable header.

=item Group#

Extract tags only for specified groups in family # (Group0 assumed if #
not given).  The option value may be a single group name or a reference
to a list of groups.  Case is significant in group names.  Specify a
group to be excluded by preceeding group name with a '-'.  See
B<GetAllGroups> for a list of available groups.

=item List

Flag to extract lists of PrintConv values into arrays instead of
concatinating them into comma-separated strings.  Default is 0.

=item MakerNotes

Flag to cause MakerNotes data to be extracted as a separate binary
data value.

=item PrintConv

Flag to enable automatic print conversion.  Also enables inverse
print conversion for writing.  Default is 1.

=item Sort

Specifies order to sort tags in returned list:

  Alpha  - Sort alphabetically
  File   - Sort in order that tags were found in the file
  Group# - Sort by tag group, where # is the group family
           number.  If # is not specified, Group0 is assumed.
           See GetGroup for a list of groups.
  Input  - Sort in same order as input tag arguments (default)

=item Unknown

Flag to get the values of unknown tags.  If set to 1, unknown tags are
extracted from EXIF directories.  If set to 2, unknown tags are also
extracted from binary data blocks.  Default is 0.

=item Verbose

Flag to print verbose messages.  May be set to a value from 0 to 4 to be
increasingly verbose.  Default is 0.  With the verbose option set,
messages are printed to the console as the file is parsed.  Level 1
prints the tag names and raw values.  Level 2 adds more details about
the tags.  Level 3 adds a hex dump of the tag data with a limit on the
number of bytes dumped, and level 4 removes this length limit.

=back

=item Return Values:

The original value of the last specified parameter.

=back

=head2 ClearOptions

Reset all options to their default values.

    $exifTool->ClearOptions();

=over 4

=item Inputs:

0) ExifTool object reference

=item Return Values:

(none)

=back

=head2 ExtractInfo

Extract all meta information from an image.

    $success = $exifTool->ExtractInfo('image.jpg', \%options);

=over 4

=item Inputs:

B<ExtractInfo> takes exactly the same arguments as B<ImageInfo>.  The only
difference is that a list of tags is not returned if an ARRAY reference is
given.  The following options are effective in the call to B<ExtractInfo>:

Binary, Composite, DateFormat, PrintConv, Unknown and Verbose.

=item Return Value:

1 if image was valid, 0 otherwise (and 'Error' tag set).

=back

=head2 GetInfo

B<GetInfo> is called to return meta information after it has been extracted
from the image by a previous call to B<ExtractInfo> or B<ImageInfo>. This
function may be called repeatedly after a single call to B<ExtractInfo> or
B<ImageInfo>.

    # Get image width and hieght only
    $info = $exifTool->GetInfo('ImageWidth', 'ImageHeight');

    # Get information for all tags in list (list updated with tags found)
    $info = $exifTool->GetInfo(\@ioTagList);

    # Get all information in Author or Location groups
    $info = $exifTool->GetInfo({Group2 => ['Author', 'Location']});

=over 4

=item Inputs:

Inputs are the same as B<ExtractInfo> and B<ImageInfo> except that an image
can not be specified.  Options in effect are:

Duplicates, Exclude, Group#, (and Sort if tag list reference is given).

=item Return Value:

Reference to information hash, the same as with B<ImageInfo>.

=back

=head2 WriteInfo

Write meta information to a file.  The specified source file is rewritten to
the destination file.  The meta information in the file new file is changed
as specified by previous calls to B<SetNewValue>.

    $exifTool->WriteInfo($srcfile, $dstfile);

=over 4

=item Inputs:

0) ExifTool object reference

1) Source file name, file reference, or scalar reference

2) Destination file name, file reference, or scalar reference

=item Return Value:

1 if file was written OK, 2 if file was written but no changes made, 0 on file
write error.

If an error code is returned, an Error tag is set and GetValue('Error') can
be called to obtain the error description.  A Warning tag mag be set even if
this routine is successful.

    $errorMessage = $exifTool->GetValue('Error');
    $warningMessage = $exifTool->GetValue('Warning');

=item Notes:

Will not overwrite an existing file.

=back

=head2 CombineInfo

Combine information from more than one information hash into a single hash.

    $info = $exifTool->CombineInfo($info1, $info2, $info3);

=over 4

=item Inputs:

0) ExifTool object reference

1-N) Information hash references

=back

If the Duplicates option is disabled and duplicate tags exist, the order of
the hashes is significant.  In this case, the value used is the first value
found as the hashes are scanned in order of input.  The Duplicates option
is the only option that is in effect for this function.

=head2 GetTagList

Get a sorted list of tags from the specified information hash or tag list.

    @tags = $exifTool->GetTagList($info, 'Group0');

=over 4

=item Inputs:

0) ExifTool object reference,

1) [optional] Information hash reference or tag list reference,

2) [optional] Sort order ('File', 'Input', 'Alpha' or 'Group#').

If the information hash or tag list reference is not provided, then the list
of found tags from the last call to B<ImageInfo>, B<ExtractInfo> or
B<GetInfo> is used instead, and the result is the same as if B<GetFoundTags>
was called.  If sort order is not specified, the sort order is taken from
the current options settings.

=item Return Values:

A list of tags in the specified order.

=back

=head2 GetFoundTags

Get list of found tags in specified sort order.  The found tags are the
tags for the information obtained from the most recent call to B<ImageInfo>,
B<ExtractInfo> or B<GetInfo> for this object.

    @tags = $exifTool->GetFoundTags('File');

=over 4

=item Inputs:

0) ExifTool object reference

1) [optional] Sort order ('File', 'Input', 'Alpha' or 'Group#')

If sort order is not specified, the sort order from the ExifTool options is
used.

=item Return Values:

A list of tags in the specified order.

=back

=head2 GetRequestedTags

Get list of requested tags.  These are the tags that were specified in the
arguments of the most recent call to B<ImageInfo>, B<ExtractInfo> or
B<GetInfo>, including tags specified via a tag list reference. Shortcut
tags are expanded in the list.

    @tags = $exifTool->GetRequestedTags();

=over 4

=item Inputs:

(none)

=item Return Values:

List of requested tags in the same order that they were specified.
Note that this list will be empty if tags were not specifically requested
(ie. If extracting all tags).

=back

=head2 GetValue

Get the value of specified tag.  By default this routine returns the
human-readable (PrintConv) value, but optionally returns the
machine-readable (ValueConv) value.  Note that the PrintConv value will only
differ from the ValueConv value if the PrintConv option is enabled (which it
is by default), or if the values form a list.  In the case of a list of
values (as can happen with the 'Keywords' tag for instance), PrintConv
returns a comma-separated string of values, while ValueConv returns a
reference to an array of values or the array itself in list context. The
PrintConv values are the values returned by B<ImageInfo> and B<GetInfo> in the
tag/value hash.

    # PrintConv example
    my $val = $exifTool->GetValue($tag);
    if (ref $val eq 'SCALAR') {
        print "$tag = (unprintable value)\n";
    } else {
        print "$tag = $val\n";
    }

    # ValueConv examples
    my $val = $exifTool->GetValue($tag, 'ValueConv');
    if (ref $val eq 'ARRAY') {
        print "got a list reference for $tag\n";
    } else {
        print "$tag is a simple scalar\n";
    }

    my @keywords = $exifTool->GetValue('Keywords', 'ValueConv');

=over 4

=item Inputs:

0) ExifTool object reference

1) Tag key

2) [optional] Value type, 'PrintConv' (default) or 'ValueConv'

=item Return Values:

The value of the specified tag.  If the tag represents a list of values then
a comma-separated string of values is returned for PrintConv if the List
option is disabled, otherwise a reference to the list of values is returned
in scalar context, or the list itself is returned in list context.  PrintConv
values may also be scalar references to binary data.

=back

=head2 SetNewValue

Set the new value for a tag.  The new value is the value that will be written
for this tag in subsequent calls to B<WriteInfo>.

For tag lists (like Keywords), call repeatedly with the same tag name for
each value in the list.

    $success = $exifTool->SetNewValue($tag,$value);

    ($success, $errStr) = $exifTool->SetNewValue($tag,$value);

    # delete a tag (also resets AddValue and DelValue options for this tag)
    $exifTool->SetNewValue($tag);

    # reset all values from previous calls to SetNewValue()
    $exifTool->SetNewValue();

    # delete a single keyword
    $exifTool->SetNewValue('Keywords', $word, DelValue=>1);

    # add a keyword without replacing existing keywords
    $exifTool->SetNewValue('Keywords', $word, AddValue=>1);

    # set a tag in a specific group
    $exifTool->SetNewValue('Headline', $val, Group=>'XMP');

=over 4

=item Inputs:

0) ExifTool object reference

1) [optional] Tag key or tag name, or undefined to clear all new values

2) [optional] New value for tag.  Undefined to delete tag from file.

3-N) [optional] SetNewValue options hash entries (see below)

=item SetNewValue Options:

=over 4

=item Type

The type of value being set.  Valid values are PrintConv, ValueConv
or Raw.  Default is PrintConv.

=item AddValue

Specifies that the value be added to an existing list rather than
replacing the list.  Valid values are 0 or 1.  Default is 0.

=item DelValue

Delete the exisiting tag if it has the specified value.  Valid values are
0 or 1.  Default is 0.

=item Group

Specifies group name where tag should be written. If not specified, tag is
written to hightest priority group as specified by SetNewGroups().  Valid
groups for writing are EXIF, GPS, IPTC, XMP or MakerNotes.  Case is not
significant.

=item Replace

Flag to replace the previous new value for this tag.  Valid values are 0
(don't repace), 1 (replace with specified new value) or 2 (reset previous
new value only).

=back

=item Return Values:

The number of tags set and prints any errors in scalar context, or the
returns number of tags set and the error string in list context

=back

=head2 SetNewValuesFromFile

A very powerful routine that attempts to set the new value for all tags
from information found in the specified file.

    $info = $exifTool->SetNewValuesFromFile($srcFile);

=over 4

=item Inputs:

0) ExifTool object reference

1) File name, file reference, or scalar reference

=item Return Values:

A hash of information that was set successfully.  May include Warning or
Error entries if there were problems reading the input file.

=back

=head2 GetNewValues

Get list of new Raw values for the specified tag.  These are the values
that will be written to file.  Only tags which support a 'List' may return
more than one value.

    $rawVal = $exifTool->GetNewValues($tag);

    @rawVals = $exifTool->GetNewValues($tag);

=over 4

=item Inputs:

0) ExifTool object reference

1) Tag key or tag name

=item Return Values:

List of new Raw tag values.  The list may be empty if the tag is being
deleted (ie. if SetNewValue was called without a value).

=back

=head2 SetNewGroups

Set priority for tag groups in subsequent calls to SetNewValue().  Default
priority is EXIF, GPS, IPTC, XMP, MakerNotes, in that order.  Case is not
significant.

    $exifTool->SetNewGroups('XMP','EXIF','IPTC');

=over 4

=item Inputs:

0) ExifTool object reference

1-N) Groups in order of priority.  If no groups are specified, the priorities
are reset to the defaults.

=item Return Value:

None.

=back

=head2 GetNewGroups

Get current group priority list.

    @groups = $exifTool->GetNewGroups();

=over 4

=item Inputs:

0) ExifTool object reference

=item Return Values:

List of group names in order of write priority.  Highest priority first.

=back

=head2 GetTagID

Get the ID for the specified tag.  The ID is the IFD tag number in EXIF
information, the property name in XMP information, or the data offset in a
binary data block. For some tags, such as Composite tags where there is no ID,
an empty string is returned.

    $id = $exifTool->GetTagID($tag);

=over 4

=item Inputs:

0) ExifTool object reference

1) Tag key

=item Return Values:

Tag ID or '' of there is no ID for this tag.

=back

=head2 GetDescription

Get description for specified tag.  This function will always return a
defined value.  In the case where the description doesn't exist, the tag
name is returned.

=over 4

=item Inputs:

0) ExifTool object reference

1) Tag key

=item Return Values:

A description for the specified tag.

=back

=head2 GetGroup

Get group name for specified tag.

    $group = $exifTool->GetGroup($tag, 0);

=over 4

=item Inputs:

0) ExifTool object reference

1) Tag key

2) [optional] Group family number

=item Return Values:

Group name (or 'Other' if tag has no group).  If no group family is
specified, B<GetGroup> returns the name of the group in family 0 when called
in scalar context, or the names of groups for all families in list context.
See B<GetAllGroups> for a list of groups in each famly.

=back

=head2 GetGroups

Get list of group names for specified information.

    @groups = $exifTool->GetGroups($info, 2);

=over 4

=item Inputs:

0) ExifTool object reference

1) [optional] Info hash ref (default is all extracted info)

2) [optional] Group family number (default 0)

=item Return Values:

List of group names in alphabetical order. If information hash is not
specified, the group names are returned for all extracted information.

=back

=head2 BuildCompositeTags

Builds composite tags from required tags.  The composite tags are
convenience tags which are derived from the values of other tags.  This
routine is called automatically by B<ImageInfo> and B<ExtractInfo> if the
Composite option is set.

=over 4

=item Inputs:

0) ExifTool object reference

=item Return Values:

(none)

=item Notes:

Tag values are calculated in alphabetical order unless a tag Require's or
Desire's another composite tag, in which case the calculation is deferred
until after the other tag is calculated. Composite tags may need to read
data from the image for their value to be determined, so for these
B<BuildCompositeTags> must be called while the image is available.  This is
only a problem if B<ImageInfo> is called with a filename (as opposed to a
file reference or scalar reference) since in this case the file is closed
before B<ImageInfo> returns.  However if you enable the Composite
option, B<BuildCompositeTags>  is called from within B<ImageInfo> before the
file is closed.  (Note: As of ExifTool version 3.10, only the PreviewImage
required access to the image data.)

=back

=head2 GetTagName [static]

Get name of tag from tag key.  This is a convenience function that
strips the embedded copy number, if it exists, from the tag key.

Note: "static" in the heading above indicates that the function does not
require an ExifTool object reference as the first argument.  All functions
documented below are also static.

    $tagName = Image::ExifTool::GetTagName($tag);

=over 4

=item Inputs:

0) Tag key

=item Return Value:

Tag name.  This is the same as the tag key but has the copy number removed.

=back

=head2 GetShortcuts [static]

Get a list of shortcut tags.

=over 4

=item Inputs:

(none)

=item Return Values:

List of shortcut tags (as defined in Image::ExifTool::Shortcuts).

=back

=head2 GetAllTags [static]

Get list of all available tag names.

    @tagList = Image::ExifTool::GetAllTags();

=over 4

=item Inputs:

(none)

=item Return Values:

A list of all available tags in alphabetical order.

=back

=head2 GetWritableTags [static]

Get list of all writable tag names.

    @tagList = Image::ExifTool::GetWritableTags();

=over 4

=item Inputs:

(none)

=item Return Values:

A list of all writable tags in alphabetical order.  These are the
tags for which the values may be set through SetNewValue().

=back

=head2 GetAllGroups [static]

Get list of all group names in specified family.

    @groupList = Image::ExifTool::GetAllGroups($family);

=over 4

=item Inputs:

0) Group family number (0-2)

=item Return Values:

A list of all groups in the specified family in alphabetical order.

=back

Three families of groups are currently defined: 0, 1 and 2. Families 0 and 1
are based on the file structure, and family 2 classifies information based
on the logical category to which the information refers.

Families 0 and 1 are similar except that family 1 is more specific, and
sub-divides the EXIF, MakerNotes, XMP and ICC_Profile groups to give more
detail about the specific location where the information was found.  The
EXIF group is split up based on the specific IFD (Image File Directory), the
MakerNotes group is divided into groups for each manufacturer, and the XMP
group is separated based on the XMP namespace prefix.  Note that only common
XMP namespaces are listed below but additional namespaces may be present in
some XMP data.  Also note that the 'XMP-xmp...' group names may appear in
the older form 'XMP-xap...' since these names evolved as the XMP standard
was developed.  The ICC_Profile group is broken down to give information
about the specific ICC_Profile tag from which multiple values were
extracted. As well, information extracted from the ICC_Profile header is
separated into the ICC-header group.

Here is a complete list of groups for each family:

=over 4

=item Family 0 (General Location):

Composite, EXIF, ExifTool, File, GPS, GeoTiff, ICC_Profile, IPTC, MakerNotes,
Photoshop, PrintIM, XMP

=item Family 1 (Detailed Location):

Canon, CanonCustom, CanonRaw, Casio, Composite, ExifIFD, ExifTool, File,
FujiFilm, GPS, GeoTiff, GlobParamIFD, ICC-chrm, ICC-clrt, ICC-header, ICC-meas,
ICC-view, ICC_Profile, IFD0, IFD1, IPTC, InteropIFD, MakerUnknown, Minolta,
Nikon, NikonPreview, Olympus, Panasonic, Pentax, Photoshop, PrintIM, Sanyo,
Sigma, Sony, SubIFD, XMP, XMP-aux, XMP-crs, XMP-dc, XMP-exif, XMP-pdf,
XMP-photoshop, XMP-tiff, XMP-xmp, XMP-xmpBJ, XMP-xmpMM, XMP-xmpRights

=item Family 2 (Category):

Author, Camera, ExifTool, Image, Location, Other, Printing, Time, Unknown

=back

=head2 GetFileType [static]

Get type of file given file name.

    my $type = Image::ExifTool::GetFileType($filename);

=over 4

=item Inputs:

0) File name (or just an extension)

=item Return Value:

A string, based on the file extension, which represents the type of file.

=back

=head1 AUTHOR

Copyright 2003-2005, Phil Harvey

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 CREDITS

Thanks to the following people for their help:

B<Malcolm Wotton> for his help with the D30 Custom Functions.

B<David Anson> for his help sorting out binary file problems on Windows.

B<Leon Booyens> for his suggestions.

B<Jeremy Brown> for the 35efl tags.

B<Dan Heller> for his bug reports, detailed suggestions and guidance.

B<Wayne Smith> for his help figuring out the Pentax maker notes.

B<Michael Rommel> for his bug fixes and additions to the Canon maker notes.

B<Joseph Heled> for help figuring out some of the Nikon D70 maker notes.

B<Joachim Loehr> for adding the Casio type 2 maker notes.

B<Greg Troxel> for his suggestions and for adding ExifTool to pkgsrc-wip.

B<Jay Al-Saadi> for his discoveries with the Minolta white balance tag.

B<Thomas Walter> for figuring out some Nikon tags.

B<Brian Ristuccia> for more information about some Nikon tags.

B<Daniel Pittman> for his additions to the Canon WhiteBalance conversion.

B<Christian Koller> for decoding the 20D custom functions.

=head1 SEE ALSO

L<Image::Info|Image::Info>, L<Image::MetaData::JPEG|Image::MetaData::JPEG>

=cut

# end
